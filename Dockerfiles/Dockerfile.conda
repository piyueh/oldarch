# Dockerfile.conda
#
# This Dockerfile creates an Arch Linux image with glibc 2.23, miniconda, and 
# pytorch-gpu+h5py through conda.
#
# Copyright Â© 2019 Pi-Yueh Chuang <pychuang@gwu.edu>
# Distributed under terms of the BSD 3-Clause license.

# base image
FROM pychuang/oldarch:fancybase20160801

# download miniconda and install it
RUN cd /root \
 && export CONDAURL="https://repo.anaconda.com/miniconda" \
 && export CONDAEXE="Miniconda3-py37_4.8.3-Linux-x86_64.sh"\
 && export CONDASHA="bb2e3cedd2e78a8bb6872ab3ab5b1266a90f8c7004a22d8dc2ea5effeb6a439a" \
 && curl -LO "$CONDAURL/$CONDAEXE"  \
 && echo "$CONDASHA $CONDAEXE" | sha256sum -c \
 && sh $CONDAEXE -b -f -p /opt/anaconda \
 && rm $CONDAEXE \
 && source /opt/anaconda/bin/activate base \
 && conda install pytorch torchvision cudatoolkit=10.1 -c pytorch \
 && conda install -c conda-forge tensorboard \
 && conda clean --all

# separate smaller packages so that we don't have to rebuild PyTorch part everytime
RUN cd /root \
 && source /opt/anaconda/bin/activate base \
 && conda install h5py matplotlib scipy mpi4py pyyaml \
 && conda clean --all

# persistent variables (for both image creation and runtime)
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# wrapping the exec command with first sourcing anaconda's base environment
RUN cd / \
 && echo "#!/bin/sh" >> /bin/execwrapper.sh \
 && echo "set -e" >> /bin/execwrapper.sh \
 && echo "source /opt/anaconda/bin/activate base" >> /bin/execwrapper.sh \
 && echo "exec \"\$@\"" >> /bin/execwrapper.sh \
 && chmod +x /bin/execwrapper.sh

# execute any command with sourcing anaconda environment first
ENTRYPOINT ["/bin/execwrapper.sh"]

# without specifying any command, then just run zsh
CMD ["/bin/zsh"]

# vim:ft=dockerfile
